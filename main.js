/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CurrentTimePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  timeFormat: "YYYY-MM-DD HH:mm:ss"
};
var CurrentTimePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEditorSuggest(new CurrentTimeSuggester(this));
    this.addCommand({
      id: "insert-current-time",
      name: "\u63D2\u5165\u5F53\u524D\u65F6\u95F4",
      editorCallback: (editor) => {
        const currentTime = this.getCurrentTime();
        editor.replaceSelection(`${currentTime} `);
      }
    });
    this.addSettingTab(new CurrentTimeSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  getCurrentTime() {
    const now = new Date();
    return this.formatTime(now, this.settings.timeFormat);
  }
  formatTime(date, format) {
    let result = format;
    const year = date.getFullYear().toString();
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const day = date.getDate().toString().padStart(2, "0");
    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");
    const seconds = date.getSeconds().toString().padStart(2, "0");
    result = result.replace(/YYYY/g, year);
    result = result.replace(/MM/g, month);
    result = result.replace(/DD/g, day);
    result = result.replace(/HH/g, hours);
    result = result.replace(/mm/g, minutes);
    result = result.replace(/ss/g, seconds);
    return result;
  }
};
var CurrentTimeSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onTrigger(cursor, editor) {
    const line = editor.getLine(cursor.line);
    const subString = line.substring(0, cursor.ch);
    const match = subString.match(/\/$/);
    if (!match)
      return null;
    return {
      start: {
        line: cursor.line,
        ch: match.index || 0
      },
      end: cursor,
      query: match[0]
    };
  }
  getSuggestions(context) {
    return ["time - \u63D2\u5165\u5F53\u524D\u65F6\u95F4"];
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion);
  }
  selectSuggestion(suggestion) {
    if (!this.context)
      return;
    const editor = this.context.editor;
    const currentTime = this.plugin.getCurrentTime();
    editor.replaceRange(
      `${currentTime}`,
      this.context.start,
      this.context.end
    );
  }
};
var CurrentTimeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\u65F6\u95F4\u683C\u5F0F").setDesc("\u652F\u6301\u8BBE\u7F6E\u7684\u65F6\u95F4\u683C\u5F0F (YYYY, MM, DD, HH, mm, ss)").addText((text) => text.setPlaceholder("YYYY-MM-DD HH:mm:ss").setValue(this.plugin.settings.timeFormat).onChange(async (value) => {
      this.plugin.settings.timeFormat = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("div", {
      text: "\u793A\u4F8B: YYYY-MM-DD HH:mm:ss \u2192 2023-05-20 13:45:30"
    }).addClass("setting-item-description");
  }
};
//# sourceMappingURL=data:application/json;base64,
